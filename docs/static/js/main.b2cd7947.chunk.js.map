{"version":3,"sources":["components/PokemonForm.js","hooks/fetchPokemon.js","components/PokemonDataView.js","components/PokemonInfoFallback.js","components/PokemonInfo.js","PokemonApp.js","index.js"],"names":["PokemonForm","externalPokemonName","pokemonName","initialPokemonName","onSubmit","React","useState","setPokemonName","handleSelect","newPokemonName","useEffect","e","preventDefault","className","htmlFor","type","onClick","id","name","placeholder","value","onChange","target","disabled","length","formatDate","date","getHours","String","getMinutes","padStart","getSeconds","getMilliseconds","PokemonDataView","pokemon","src","image","alt","number","attacks","special","map","attack","key","damage","fetchedAt","PokemonInfoFallback","fallbackPokemonData","useRef","current","PokemonInfo","status","error","state","setState","delay","pokemonQuery","window","fetch","method","headers","body","JSON","stringify","query","variables","toLowerCase","then","response","a","json","data","ok","Date","Promise","reject","Error","message","errors","join","fetchPokemon","role","style","whiteSpace","PokemonApp","onReset","resetKeys","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b2cd7947.chunk.js","sourcesContent":["import React, {useEffect} from 'react'\r\nimport './styles.css'\r\nexport function PokemonForm({\r\n  pokemonName: externalPokemonName,\r\n  initialPokemonName = externalPokemonName || '',\r\n  onSubmit,\r\n}) {\r\n  const [pokemonName, setPokemonName] = React.useState(initialPokemonName)\r\n\r\n  // this is generally not a great idea. We're synchronizing state when it is\r\n  // normally better to derive it https://kentcdodds.com/blog/dont-sync-state-derive-it\r\n  // however, we're doing things this way to make it easier for the exercises\r\n  // to not have to worry about the logic for this PokemonForm component.\r\n  useEffect(() => {\r\n    // note that because it's a string value, if the externalPokemonName\r\n    // is the same as the one we're managing, this will not trigger a re-render\r\n    if (typeof externalPokemonName === 'string') {\r\n      setPokemonName(externalPokemonName)\r\n    }\r\n  }, [externalPokemonName])\r\n\r\n  function handleChange(e) {\r\n    setPokemonName(e.target.value)\r\n  }\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault()\r\n    onSubmit(pokemonName)\r\n  }\r\n\r\n  function handleSelect(newPokemonName) {\r\n    setPokemonName(newPokemonName)\r\n    onSubmit(newPokemonName)\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className=\"pokemon-form\">\r\n      <label htmlFor=\"pokemonName-input\">Pokemon Name</label>\r\n      <small>\r\n        Try{' '}\r\n        <button\r\n          className=\"invisible-button\"\r\n          type=\"button\"\r\n          onClick={() => handleSelect('pikachu')}\r\n        >\r\n          \"pikachu\"\r\n        </button>\r\n        {', '}\r\n        <button\r\n          className=\"invisible-button\"\r\n          type=\"button\"\r\n          onClick={() => handleSelect('charizard')}\r\n        >\r\n          \"charizard\"\r\n        </button>\r\n        {', or '}\r\n        <button\r\n          className=\"invisible-button\"\r\n          type=\"button\"\r\n          onClick={() => handleSelect('mew')}\r\n        >\r\n          \"mew\"\r\n        </button>\r\n      </small>\r\n      <div>\r\n        <input\r\n          className=\"pokemonName-input\"\r\n          id=\"pokemonName-input\"\r\n          name=\"pokemonName\"\r\n          placeholder=\"Pokemon Name...\"\r\n          value={pokemonName}\r\n          onChange={handleChange}\r\n        />\r\n        <button type=\"submit\" disabled={!pokemonName.length}>\r\n          Submit\r\n        </button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n","const formatDate = date =>\r\n  `${date.getHours()}:${String(date.getMinutes()).padStart(2, '0')} ${String(\r\n    date.getSeconds(),\r\n  ).padStart(2, '0')}.${String(date.getMilliseconds()).padStart(3, '0')}`\r\n\r\n// the delay argument is for faking things out a bit\r\nexport function fetchPokemon(name, delay = 1500) {\r\n  const pokemonQuery = `\r\n    query PokemonInfo($name: String) {\r\n      pokemon(name: $name) {\r\n        id\r\n        number\r\n        name\r\n        image\r\n        attacks {\r\n          special {\r\n            name\r\n            type\r\n            damage\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `\r\n\r\n  return window\r\n    .fetch('https://graphql-pokemon2.vercel.app/', {\r\n      // learn more about this API here: https://graphql-pokemon2.vercel.app/\r\n      method: 'POST',\r\n      headers: {\r\n        'content-type': 'application/json;charset=UTF-8',\r\n        delay: delay,\r\n      },\r\n      body: JSON.stringify({\r\n        query: pokemonQuery,\r\n        variables: {name: name.toLowerCase()},\r\n      }),\r\n    })\r\n    .then(async response => {\r\n      const {data} = await response.json()\r\n      if (response.ok) {\r\n        const pokemon = data?.pokemon\r\n        if (pokemon) {\r\n          pokemon.fetchedAt = formatDate(new Date())\r\n          return pokemon\r\n        } else {\r\n          return Promise.reject(new Error(`No pokemon with the name \"${name}\"`))\r\n        }\r\n      } else {\r\n        // handle the graphql errors\r\n        const error = {\r\n          message: data?.errors?.map(e => e.message).join('\\n'),\r\n        }\r\n        return Promise.reject(error)\r\n      }\r\n    })\r\n}\r\n","import React from 'react'\r\nimport './styles.css'\r\n\r\nexport function PokemonDataView({pokemon}) {\r\n  return (\r\n    <div>\r\n      <div className=\"pokemon-info__img-wrapper\">\r\n        <img src={pokemon.image} alt={pokemon.name} />\r\n      </div>\r\n      <section>\r\n        <h2>\r\n          {pokemon.name}\r\n          <sup>{pokemon.number}</sup>\r\n        </h2>\r\n      </section>\r\n      <section>\r\n        <ul>\r\n          {pokemon.attacks.special.map(attack => (\r\n            <li key={attack.name}>\r\n              <label>{attack.name}</label>:{' '}\r\n              <span>\r\n                {attack.damage} <small>({attack.type})</small>\r\n              </span>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </section>\r\n      <small className=\"pokemon-info__fetch-time\">{pokemon.fetchedAt}</small>\r\n    </div>\r\n  )\r\n}\r\n","import React, {useRef} from 'react'\r\nimport {PokemonDataView} from './PokemonDataView'\r\nexport function PokemonInfoFallback({name}) {\r\n  const initialName = useRef(name).current\r\n  const fallbackPokemonData = {\r\n    name: initialName,\r\n    number: 'XXX',\r\n    image: '/img/pokemon/fallback-pokemon.jpg',\r\n    attacks: {\r\n      special: [\r\n        {name: 'Loading Attack 1', type: 'Type', damage: 'XX'},\r\n        {name: 'Loading Attack 2', type: 'Type', damage: 'XX'},\r\n      ],\r\n    },\r\n    fetchedAt: 'loading...',\r\n  }\r\n  return <PokemonDataView pokemon={fallbackPokemonData} />\r\n}\r\n","import React, {useEffect, useState} from 'react'\r\nimport {fetchPokemon} from '../hooks/fetchPokemon'\r\nimport {PokemonDataView} from './PokemonDataView'\r\nimport {PokemonInfoFallback} from './PokemonInfoFallback'\r\n\r\nexport function PokemonInfo({pokemonName}) {\r\n  //   const [pokemon, setPokemon] = useState(null)\r\n  //   const [error, setError] = useState(null)\r\n  //   const [status, setStatus] = useState('idle')\r\n\r\n  const [state, setState] = useState({\r\n    status: pokemonName ? 'pending' : 'idle', // there was a little refresh when already have a pokemon loaded, if we will make a new petition that pokemon refresh the component\r\n    pokemon: null,\r\n    error: null,\r\n  })\r\n\r\n  const {pokemon, error, status} = state // the destructuration, I could have done it directly at useState, but I think to see better this way\r\n\r\n  useEffect(() => {\r\n    if (!pokemonName) {\r\n      return\r\n    }\r\n    // setPokemon(null) // when te state change, setPokemon will again null for load the new pokemon\r\n    // setError(null) // when te state change, setError will again null for load the new pokemon\r\n    // setStatus('pending')\r\n    setState({status: 'pending'})\r\n    fetchPokemon(pokemonName).then(\r\n      pokemon => {\r\n        setState({status: 'resolved', pokemon})\r\n        // setPokemon(pokemon)\r\n        // setStatus('resolved')\r\n      },\r\n      error => {\r\n        setState({status: 'rejected', error})\r\n        // setError(error)\r\n        // setStatus('rejected')\r\n      },\r\n    )\r\n  }, [pokemonName])\r\n\r\n  // there is a most logic about the show the user, so implemented a state for handle our components\r\n  if (status === 'idle') {\r\n    return 'Submit a pokemon' // when it load to first screen,  there isn't pokemon, so to show this message\r\n  } else if (status === 'pending') {\r\n    return <PokemonInfoFallback name={pokemonName} /> //when the request is being made, it shower theimg load\r\n  } else if (status === 'rejected') {\r\n    return (\r\n      <div role=\"alert\">\r\n        There was an error:{' '}\r\n        <pre style={{whiteSpace: 'normal'}}>{error.message}</pre>\r\n      </div>\r\n    )\r\n  } else if (status === 'resolved') {\r\n    return <PokemonDataView pokemon={pokemon} /> // return the pokemon with its information\r\n  }\r\n\r\n  // this was the as I had the logic implemented, without handle the status, I don't remove for think like it was\r\n  //   if (error) {\r\n  //     // this validation will executed when the name pokemon not exit\r\n  //     return (\r\n  //       <div role=\"alert\">\r\n  //         There was an error:{' '}\r\n  //         <pre style={{whiteSpace: 'normal'}}>{error.message}</pre>\r\n  //       </div>\r\n  //     )\r\n  //   } else if (!pokemonName) {\r\n  //     return 'Submit a pokemon' // when it load to first screen,  there isn't pokemon, so to show this message\r\n  //   } else if (!pokemon) {\r\n  //     return <PokemonInfoFallback name={pokemonName} /> //when the request is being made, it shower theimg load\r\n  //   } else {\r\n  //     return <PokemonDataView pokemon={pokemon} /> // return the pokemon with its information\r\n  //   }\r\n}\r\n","import React, {useState} from 'react'\r\nimport {PokemonForm} from './components/PokemonForm'\r\nimport {PokemonInfo} from './components/PokemonInfo'\r\nimport {ErrorBoundary} from 'react-error-boundary'\r\n\r\nexport const PokemonApp = () => {\r\n  const [pokemonName, setPokemonName] = useState('')\r\n\r\n  function handleSubmit(newPokemonName) {\r\n    setPokemonName(newPokemonName)\r\n  }\r\n\r\n  function handleReset() {\r\n    setPokemonName('')\r\n  }\r\n\r\n  return (\r\n    <div className=\"pokemon-info-app\">\r\n      <PokemonForm pokemonName={pokemonName} onSubmit={handleSubmit} />\r\n      <hr />\r\n      <div className=\"pokemon-info\">\r\n        <ErrorBoundary onReset={handleReset} resetKeys={[pokemonName]}>\r\n          <PokemonInfo pokemonName={pokemonName} />\r\n        </ErrorBoundary>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport {PokemonApp} from './PokemonApp'\nReactDOM.render(<PokemonApp />, document.getElementById('root'))\n"],"sourceRoot":""}